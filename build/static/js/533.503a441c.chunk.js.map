{"version":3,"file":"static/js/533.503a441c.chunk.js","mappings":"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","sources":["BaseUrl.jsx","components/FreeCart.jsx","Pages/Free.jsx","components/Navbar.jsx","../node_modules/@chakra-ui/toast/src/use-toast.tsx"],"sourcesContent":["\r\n\r\nexport const baseUrl = \"https://backend.defencepost.in\"\r\n// export const baseUrl = \"http://localhost:8000\"","import { Box, Button, Text } from \"@chakra-ui/react\";\r\nimport { useState } from \"react\";\r\nimport { AiFillFilePdf } from \"react-icons/ai\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport function FreeCart({ data }) {\r\n  const [isHovered, setIsHovered] = useState(false);\r\n  return (\r\n    <>\r\n      <Box\r\n        boxShadow={\r\n          \"rgba(0, 0, 0, 0.12) 0px 1px 3px, rgba(0, 0, 0, 0.24) 0px 1px 2px\"\r\n        }\r\n        width={\"100%\"}\r\n        borderRadius={\"10px\"}\r\n        transition=\"transform 0.3s ease-in-out\" // Add a CSS transition\r\n        transform={isHovered ? \"scale(1.09)\" : \"scale(1)\"} // Scale up on hover\r\n        onMouseEnter={() => setIsHovered(true)}\r\n        onMouseLeave={() => setIsHovered(false)}\r\n        cursor={\"pointer\"}\r\n      >\r\n        <Box\r\n          display={\"inline-block\"}\r\n          backgroundColor={\"gray.100\"}\r\n          width={\"100%\"}\r\n          textAlign={\"center\"}\r\n          padding={\"60px\"}\r\n          borderTopLeftRadius={\"10px\"}\r\n          borderTopRightRadius={\"10px\"}\r\n        >\r\n          <Box display={\"inline-block\"} fontSize={\"50px\"}>\r\n            <AiFillFilePdf style={{ color: \"#28a4de\" }} />\r\n          </Box>\r\n        </Box>\r\n        <Box padding={\"20px\"}>\r\n          <Text fontSize={\"25px\"} fontWeight={\"bold\"}>\r\n            {data.name}\r\n          </Text>\r\n          <Link to={`/viewfreedata/${data._id}`}>\r\n            <Button\r\n              backgroundColor={\"#28a4de\"}\r\n              color={\"white\"}\r\n              fontWeight={\"500\"}\r\n              width={\"100%\"}\r\n              marginTop={\"20px\"}\r\n              borderRadius={\"20px\"}\r\n              fontSize={\"19px\"}\r\n            >\r\n              View\r\n            </Button>\r\n          </Link>\r\n        </Box>\r\n      </Box>\r\n    </>\r\n  );\r\n}\r\n","import { Box, useToast } from \"@chakra-ui/react\";\r\nimport { FreeCart } from \"../components/FreeCart\";\r\n\r\nimport { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Spinar } from \"../components/Spinar\";\r\nimport { baseUrl } from \"../BaseUrl\";\r\nimport Navbar from \"../components/Navbar\";\r\n\r\nfunction Free() {\r\n  let toast = useToast();\r\n  let [allFreeDataGet, setAllFreeDataGet] = useState([]);\r\n  let [isLoading, setIsLoading] = useState(false);\r\n\r\n  let getAllFreeData = async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      let dataFreeGet = await axios.get(`${baseUrl}/free/`);\r\n      setAllFreeDataGet(dataFreeGet?.data);\r\n      setIsLoading(false);\r\n    } catch (err) {\r\n      setIsLoading(false);\r\n      alert(err);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    localStorage.setItem(\"prevPage\", null);\r\n    getAllFreeData();\r\n  }, []);\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <>\r\n        <Spinar />\r\n      </>\r\n    );\r\n  }\r\n\r\n  return (\r\n\r\n    <Box>\r\n      <Navbar />\r\n      <Box\r\n        marginTop={\"50px\"}\r\n        display={\"grid\"}\r\n        gridTemplateColumns={{\r\n          base: \"repeat(1, 1fr)\",\r\n          sm: \"repeat(2, 1fr)\",\r\n          md: \"repeat(3, 1fr)\",\r\n        }}\r\n        gap={\"70px\"}\r\n        margin={{ base: \"-20px 20px\", sm: \"100px 60px\" }}\r\n        fontFamily={\"Barlow\"}\r\n      >\r\n        {allFreeDataGet &&\r\n          allFreeDataGet?.map((ele, index) => {\r\n            return <FreeCart data={ele} />;\r\n          })}\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default Free;\r\n","import { NavLink, useNavigate } from \"react-router-dom\";\r\nimport { Box, Image, Select, Input, Button, Text } from \"@chakra-ui/react\";\r\nimport logoImg from \"../Images/Logo-black.jpeg\";\r\n// import { VscThreeBars } from \"react-icons/vsc\";\r\nimport { IoReorderThreeOutline } from \"react-icons/io5\";\r\nimport { ChevronDownIcon } from \"@chakra-ui/icons\";\r\nimport { IoMdLogOut } from \"react-icons/io\";\r\nimport \"../css/navbar.css\";\r\nimport \"animate.css/animate.min.css\";\r\nimport { VscThreeBars } from \"react-icons/vsc\";\r\n\r\n// import for Drawer\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerFooter,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n  DrawerContent,\r\n  DrawerCloseButton,\r\n  useDisclosure,\r\n} from \"@chakra-ui/react\";\r\nimport { useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { AlertBox } from \"./AlertBox\";\r\nimport { baseUrl } from \"../BaseUrl\";\r\n\r\n// import \"../css/navbar.css\";\r\n function Navbar() {\r\nconst navigate = useNavigate();\r\n  const { isOpen, onClose, onToggle } = useDisclosure();\r\n  const [showPostDropdown, setShowPostDropdown] = useState(false);\r\n  const [showCourseDropdown, setShowCourseDropdown] = useState(false);\r\n  const [courseData, setCourseData] = useState([]);\r\n  const [postData, setPostData] = useState([]);\r\n  const [isHovered, setIsHovered] = useState(true);\r\n\r\n  // logout\r\n  let [showLogout, setShowLogout] = useState(false);\r\n  let [token, setToken] = useState(\r\n    JSON.parse(localStorage.getItem(\"DefencePostUserDetails\"))?.token\r\n  );\r\n  let [userName, setUserName] = useState(\r\n    JSON.parse(localStorage.getItem(\"DefencePostUserDetails\"))?.userName\r\n  );\r\n  let [email, setEmail] = useState(\r\n    JSON.parse(localStorage.getItem(\"DefencePostUserDetails\"))?.email\r\n  );\r\n\r\n\r\n  const handlePostMouseEnter = () => {\r\n    setShowPostDropdown(true);\r\n  };\r\n\r\n  const handlePostMouseLeave = () => {\r\n    setShowPostDropdown(false);\r\n  };\r\n\r\n  // Course dropdown handle\r\n  const handleCourseMouseEnter = () => {\r\n    setShowCourseDropdown(true);\r\n  };\r\n\r\n  const handleCourseMouseLeave = () => {\r\n    setShowCourseDropdown(false);\r\n  };\r\n\r\n  // get all course data\r\n  let getCourseData = async () => {\r\n    try {\r\n      let dataCourse = await axios.get(`${baseUrl}/course/`);\r\n      setCourseData(dataCourse.data);\r\n    } catch (err) {\r\n      alert(err);\r\n    }\r\n  };\r\n\r\n  // get all course data\r\n  let getPostData = async () => {\r\n    try {\r\n      let dataPost = await axios.get(`${baseUrl}/post/`);\r\n      \r\n      // Extract unique categories using Set\r\n      const uniquePosts = Array.from(new Map(dataPost.data.map(post => [post.category, post])).values());\r\n  \r\n      // Set the unique categories in your state or wherever needed\r\n      setPostData(uniquePosts);\r\n    } catch (err) {\r\n      alert(err);\r\n    }\r\n  };\r\n  \r\n\r\n  // handle logout\r\n  let handleLogout = () => {\r\n    const userResponse = window.confirm(\"Are you sure you want to logout?\");\r\n    let obj = { token: null, userName: null, email: null };\r\n    if (userResponse) {\r\n      localStorage.setItem(\"DefencePostUserDetails\", JSON.stringify(obj));\r\n      navigate(\"/\")\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getPostData();\r\n    getCourseData();\r\n  }, []);\r\n\r\n  \r\n  // console.log(postData);\r\n  return (\r\n    <>\r\n      <Box\r\n        className=\"header\"\r\n        display={{\r\n          base: \"none\",\r\n          lg: \"grid\",\r\n        }}\r\n        gridTemplateColumns={token ? \"30% 1fr\" : \"30% 1fr 10%\"}\r\n        alignItems={\"center\"}\r\n        backgroundColor={\"white\"}\r\n        color={\"black\"}\r\n        boxShadow={\r\n          \"rgba(0, 0, 0, 0.1) 0px 4px 6px -1px, rgba(0, 0, 0, 0.06) 0px 2px 4px -1px\"\r\n        }\r\n        fontFamily={\"Barlow\"}\r\n        height={\"70px\"}\r\n        position={\"fixed\"} //pehele sticky than mene ye add kiya he\r\n        width={\"100%\"} // isko add kiya he\r\n        top={\"0px\"}\r\n        marginBottom={\"50px\"}\r\n        zIndex={1000}\r\n        paddingRight={\"30px\"}\r\n        // mb={\"740px\"}\r\n      >\r\n        <NavLink className=\"logo nav-link\" to={\"/\"}>\r\n          <Image src={logoImg} width={\"200px\"} height={\"100%\"}></Image>\r\n        </NavLink>\r\n\r\n        <Box\r\n          className=\"nav\"\r\n          display={\"flex\"}\r\n          justifyContent={\"flex-end\"}\r\n          fontSize={\"18px\"}\r\n          alignItems={\"center\"}\r\n        >\r\n          <NavLink className=\"navContent nav-link\" to=\"/\">\r\n            Home\r\n          </NavLink>\r\n          <Box\r\n            display={\"flex\"}\r\n            className=\"navContent\"\r\n            // border={\"1px solid red\"}\r\n            // paddingBottom={\"2px\"}\r\n            onMouseEnter={handlePostMouseEnter}\r\n            onMouseLeave={handlePostMouseLeave}\r\n          >\r\n            <NavLink className=\"nav-link\" to=\"/posts\">\r\n              Posts\r\n            </NavLink>{\" \"}\r\n            <ChevronDownIcon\r\n              style={{ position: \"relative\", top: \"5px\", marginLeft: \"5px\" }}\r\n            />\r\n            {showPostDropdown && (\r\n              <Box\r\n                className={`dropdown ${\r\n                  isHovered ? \"animate_animated animate_zoomIn\" : \"\"\r\n                }`}\r\n                position={\"absolute\"}\r\n                top={\"45px\"}\r\n                display={\"flex\"}\r\n                flexDirection={\"column\"}\r\n                backgroundColor={\"white\"}\r\n                textAlign={\"left\"}\r\n                boxShadow=\"rgba(0, 0, 0, 0.16) 0px 1px 4px\"\r\n                padding={\"10px 20px\"}\r\n                borderRadius={\"10px\"}\r\n              >\r\n                {postData.map((ele, index) => {\r\n                  return (\r\n                    <NavLink to={`/singlepostpage/${ele._id}/${index}/${ele.category}`}>\r\n                      {ele.category}\r\n                    </NavLink>\r\n                  );\r\n                })}\r\n              </Box>\r\n            )}\r\n          </Box>\r\n\r\n          <Box\r\n            display={\"flex\"}\r\n            className=\"navContent\"\r\n            onMouseEnter={handleCourseMouseEnter}\r\n            onMouseLeave={handleCourseMouseLeave}\r\n          >\r\n            <NavLink to=\"/course\" className={\"nav-link\"}>\r\n              Course\r\n            </NavLink>{\" \"}\r\n            <ChevronDownIcon\r\n              style={{ position: \"relative\", top: \"5px\", marginLeft: \"5px\" }}\r\n            />\r\n            {showCourseDropdown && (\r\n              <Box\r\n                className={`dropdown ${\r\n                  isHovered ? \"animate_animated animate_zoomIn\" : \"\"\r\n                }`}\r\n                position={\"absolute\"}\r\n                top={\"45px\"}\r\n                display={\"flex\"}\r\n                flexDirection={\"column\"}\r\n                backgroundColor={\"white\"}\r\n                textAlign={\"left\"}\r\n                padding={\"10px 20px\"}\r\n                borderRadius={\"10px\"}\r\n                boxShadow=\"rgba(0, 0, 0, 0.16) 0px 1px 4px\"\r\n              >\r\n                {showCourseDropdown &&\r\n                  courseData.map((ele, index) => {\r\n                    return (\r\n                      <NavLink\r\n                        to={`/viewdetails/${ele._id}`}\r\n                        className={\"nav-link\"}\r\n                      >\r\n                        {ele.name}\r\n                      </NavLink>\r\n                    );\r\n                  })}\r\n              </Box>\r\n            )}\r\n          </Box>\r\n          {token && (\r\n            <NavLink className=\"navContent nav-link\" to=\"/mycourse\">\r\n              My Course\r\n            </NavLink>\r\n          )}\r\n\r\n          <NavLink className=\"navContent nav-link\" to=\"/free\">\r\n            Free\r\n          </NavLink>\r\n\r\n          {/* Data */}\r\n          {email == \"masaieducation17@gmail.com\" && (\r\n            <NavLink className=\"navContent nav-link\" to={\"/datahub\"}>\r\n              DataHub\r\n            </NavLink>\r\n          )}\r\n\r\n          {!token && (\r\n            <NavLink className=\"navContent nav-link\" to=\"/login\">\r\n              Login\r\n            </NavLink>\r\n          )}\r\n          {token && (\r\n            <Text\r\n              backgroundColor={\"green.300\"}\r\n              borderRadius={\"50%\"}\r\n              width={\"40px\"}\r\n              h={\"40px\"}\r\n              // marginRight={\"20px\"}\r\n              color={\"white\"}\r\n              ml={\"20px\"}\r\n              cursor={\"pointer\"}\r\n              display={\"flex\"}\r\n              alignItems={\"center\"}\r\n              justifyContent={\"center\"}\r\n              onClick={() => {\r\n                setShowLogout(!showLogout);\r\n              }}\r\n            >\r\n              {userName[0].toUpperCase()}\r\n            </Text>\r\n          )}\r\n        </Box>\r\n        <Box display={\"flex\"} gap={\"10px\"}>\r\n          {!token && (\r\n            <NavLink\r\n              className=\"navContent\"\r\n              style={{ marginLeft: \"0px\" }}\r\n              to=\"/signup\"\r\n            >\r\n              <Button\r\n                marginLeft={\"30px\"}\r\n                backgroundColor={\"#28a4de\"}\r\n                color={\"white\"}\r\n                fontWeight={\"500\"}\r\n              >\r\n                Sign Up\r\n              </Button>\r\n            </NavLink>\r\n          )}\r\n\r\n          {showLogout && (\r\n            <Box\r\n              boxShadow={\r\n                \" rgba(50, 50, 93, 0.25) 0px 6px 12px -2px, rgba(0, 0, 0, 0.3) 0px 3px 7px -3px\"\r\n              }\r\n              position={\"absolute\"}\r\n              top={\"75px\"}\r\n              right={\"20px\"}\r\n              padding={\"10px 40px\"}\r\n              backgroundColor={\"white\"}\r\n            >\r\n              <Text fontSize={\"15px\"}>{email}</Text>\r\n              <Box\r\n                display={\"flex\"}\r\n                alignItems={\"center\"}\r\n                gap={\"10px\"}\r\n                fontSize={\"20px\"}\r\n                cursor={\"pointer\"}\r\n                onClick={handleLogout}\r\n              >\r\n                <Text>Logout</Text>\r\n                <IoMdLogOut color=\"red\" />\r\n              </Box>\r\n            </Box>\r\n          )}\r\n        </Box>\r\n      </Box>\r\n\r\n      {/* responsive navbar  */}\r\n      <Box\r\n        display={{\r\n          base: \"flex\",\r\n          lg: \"none\",\r\n        }}\r\n        justifyContent={\"space-between\"}\r\n        // backgroundColor={\"#27395F\"}\r\n        color={\"#28a4de\"}\r\n        marginBottom={\"50px\"}\r\n        marginTop={\"10px\"}\r\n        boxShadow={\"rgba(17, 17, 26, 0.1) 0px 1px 0px\"}\r\n      >\r\n        <Image src={logoImg} width={\"180px\"}></Image>\r\n        <Box className=\"ThreeLines\" cursor={\"pointer\"}>\r\n          <VscThreeBars\r\n            style={{ height: \"40px\", width: \"30px\" }}\r\n            onClick={() => {\r\n              onToggle();\r\n              isOpen;\r\n            }}\r\n          />\r\n        </Box>\r\n      </Box>\r\n\r\n      {/* navbar Drawer/responsive code  */}\r\n      <Drawer isOpen={isOpen} placement=\"right\" onClose={() => {}}>\r\n        <DrawerOverlay />\r\n        <DrawerContent>\r\n          <DrawerCloseButton onClick={onClose} />\r\n\r\n          <DrawerBody>\r\n            <Box display={\"grid\"} gap={\"15px\"} fontSize={\"20px\"}>\r\n              <Text fontSize={\"14px\"} textDecoration={\"underline\"}>{email}</Text>\r\n              <NavLink className={\"nav-link\"} to=\"/\" onClick={onClose}>\r\n                Home\r\n              </NavLink>\r\n              <Box display={\"flex\"}>\r\n                <NavLink to=\"/posts\" className={\"nav-link\"}>\r\n                  Posts\r\n                </NavLink>{\" \"}\r\n                {/* <ChevronDownIcon\r\n                  style={{\r\n                    position: \"relative\",\r\n                    top: \"5px\",\r\n                    marginLeft: \"10px\",\r\n                  }}\r\n                /> */}\r\n              </Box>\r\n              <Box display={\"flex\"}>\r\n                <NavLink to=\"/course\" className={\"nav-link\"}>\r\n                  Course\r\n                </NavLink>{\" \"}\r\n                {/* <ChevronDownIcon\r\n                  style={{\r\n                    position: \"relative\",\r\n                    top: \"5px\",\r\n                    marginLeft: \"5px\",\r\n                  }}\r\n                /> */}\r\n              </Box>\r\n              {token && <NavLink to=\"/mycourse\" onClick={onClose} className={\"nav-link\"}>\r\n                My Course\r\n              </NavLink>}\r\n              <NavLink to=\"/free\" onClick={onClose} className={\"nav-link\"}>\r\n                Free Resources\r\n              </NavLink>\r\n              {token ? (\r\n                <Text onClick={handleLogout} className={\"nav-link\"}>\r\n                  Logout\r\n                </Text>\r\n              ) : (\r\n                <NavLink to=\"/login\" onClick={onClose} className={\"nav-link\"}>\r\n                  Login\r\n                </NavLink>\r\n              )}\r\n\r\n              <NavLink to=\"/signup\" onClick={onClose} className={\"nav-link\"}>\r\n                Sign Up\r\n              </NavLink>\r\n            </Box>\r\n          </DrawerBody>\r\n\r\n          <DrawerFooter>\r\n            <Button variant=\"outline\" mr={3} onClick={onClose}>\r\n              Cancel\r\n            </Button>\r\n          </DrawerFooter>\r\n        </DrawerContent>\r\n      </Drawer>\r\n    </>\r\n  );\r\n}\r\nexport default Navbar;","import type { AlertStatus } from \"@chakra-ui/alert\"\nimport { StyleProps, ThemingProps, useChakra } from \"@chakra-ui/system\"\nimport type { RenderProps, ToastId, ToastOptions } from \"./toast.types\"\nimport { createToastFn, CreateToastFnReturn } from \"./toast\"\nimport { ToastPosition } from \"./toast.placement\"\nimport { useMemo } from \"react\"\nimport { useToastOptionContext } from \"./toast.provider\"\n\nexport interface UseToastOptions extends ThemingProps<\"Alert\"> {\n  /**\n   * The placement of the toast\n   *\n   * @default \"bottom\"\n   */\n  position?: ToastPosition\n  /**\n   * The delay before the toast hides (in milliseconds)\n   * If set to `null`, toast will never dismiss.\n   *\n   * @default 5000 ( = 5000ms )\n   */\n  duration?: ToastOptions[\"duration\"]\n  /**\n   * Render a component toast component.\n   * Any component passed will receive 2 props: `id` and `onClose`.\n   */\n  render?(props: RenderProps): React.ReactNode\n  /**\n   * The title of the toast\n   */\n  title?: React.ReactNode\n  /**\n   * The description of the toast\n   */\n  description?: React.ReactNode\n  /**\n   * If `true`, toast will show a close button\n   * @default false\n   */\n  isClosable?: boolean\n  /**\n   * The status of the toast.\n   */\n  status?: AlertStatus\n  /**\n   * A custom icon that will be displayed by the toast.\n   */\n  icon?: React.ReactNode\n  /**\n   * The `id` of the toast.\n   *\n   * Mostly used when you need to prevent duplicate.\n   * By default, we generate a unique `id` for each toast\n   */\n  id?: ToastId\n  /**\n   * Callback function to run side effects after the toast has closed.\n   */\n  onCloseComplete?: () => void\n  /**\n   * Optional style overrides for the container wrapping the toast component.\n   */\n  containerStyle?: StyleProps\n}\n\n/**\n * React hook used to create a function that can be used\n * to show toasts in an application.\n */\nexport function useToast(options?: UseToastOptions): CreateToastFnReturn {\n  const { theme } = useChakra()\n  const defaultOptions = useToastOptionContext()\n\n  return useMemo(\n    () =>\n      createToastFn(theme.direction, {\n        ...defaultOptions,\n        ...options,\n      }),\n    [options, theme.direction, defaultOptions],\n  )\n}\n\nexport default useToast\n"],"names":["baseUrl","FreeCart","_ref","data","isHovered","setIsHovered","useState","_jsx","_Fragment","children","_jsxs","Box","boxShadow","width","borderRadius","transition","transform","onMouseEnter","onMouseLeave","cursor","display","backgroundColor","textAlign","padding","borderTopLeftRadius","borderTopRightRadius","fontSize","AiFillFilePdf","style","color","Text","fontWeight","name","Link","to","concat","_id","Button","marginTop","useToast","allFreeDataGet","setAllFreeDataGet","isLoading","setIsLoading","useEffect","localStorage","setItem","async","dataFreeGet","axios","get","err","alert","getAllFreeData","Spinar","Navbar","gridTemplateColumns","base","sm","md","gap","margin","fontFamily","map","ele","index","_JSON$parse","_JSON$parse2","_JSON$parse3","navigate","useNavigate","isOpen","onClose","onToggle","useDisclosure","showPostDropdown","setShowPostDropdown","showCourseDropdown","setShowCourseDropdown","courseData","setCourseData","postData","setPostData","showLogout","setShowLogout","token","setToken","JSON","parse","getItem","userName","setUserName","email","setEmail","handleLogout","obj","window","confirm","stringify","dataPost","uniquePosts","Array","from","Map","post","category","values","getPostData","dataCourse","getCourseData","className","lg","alignItems","height","position","top","marginBottom","zIndex","paddingRight","NavLink","Image","src","logoImg","justifyContent","handlePostMouseEnter","handlePostMouseLeave","ChevronDownIcon","marginLeft","flexDirection","handleCourseMouseEnter","handleCourseMouseLeave","h","ml","onClick","toUpperCase","right","IoMdLogOut","VscThreeBars","Drawer","placement","DrawerOverlay","DrawerContent","DrawerCloseButton","DrawerBody","textDecoration","DrawerFooter","variant","mr","options","theme","useChakra","defaultOptions","useToastOptionContext","useMemo","createToastFn","direction"],"sourceRoot":""}